
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.3
 * Query Engine version: bb420e667c1820a8c05a38023385f6cc7ef8e83a
 */
Prisma.prismaVersion = {
  client: "6.16.3",
  engine: "bb420e667c1820a8c05a38023385f6cc7ef8e83a"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.GameScalarFieldEnum = {
  id: 'id',
  gameName: 'gameName'
};

exports.Prisma.OrgScalarFieldEnum = {
  id: 'id',
  name: 'name',
  adminId: 'adminId'
};

exports.Prisma.OrgManagerScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  userId: 'userId'
};

exports.Prisma.ProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  userTeam: 'userTeam'
};

exports.Prisma.TournamentScalarFieldEnum = {
  id: 'id',
  noOfTeam: 'noOfTeam',
  gameName: 'gameName',
  noOfPlayerInTeam: 'noOfPlayerInTeam'
};

exports.Prisma.TeamScalarFieldEnum = {
  id: 'id',
  noOfPlayer: 'noOfPlayer'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  password: 'password',
  email: 'email',
  role: 'role'
};

exports.Prisma.UserGameScalarFieldEnum = {
  gameName: 'gameName',
  userGameId: 'userGameId',
  userIgn: 'userIgn'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};
exports.UserRole = exports.$Enums.UserRole = {
  ADMIN: 'ADMIN',
  MANAGER: 'MANAGER',
  MODERATOR: 'MODERATOR',
  ACE: 'ACE',
  USER: 'USER'
};

exports.Prisma.ModelName = {
  Game: 'Game',
  Org: 'Org',
  OrgManager: 'OrgManager',
  Profile: 'Profile',
  Tournament: 'Tournament',
  Team: 'Team',
  User: 'User',
  UserGame: 'UserGame'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/Users/mrblackghost/Documents/private/Tournament/Backend/src/generated/prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "darwin-arm64",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/Users/mrblackghost/Documents/private/Tournament/Backend/prisma/schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.16.3",
  "engineVersion": "bb420e667c1820a8c05a38023385f6cc7ef8e83a",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../src/generated/prisma\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nenum UserRole {\n  ADMIN\n  MANAGER\n  MODERATOR\n  ACE\n  USER\n}\n\nmodel Game {\n  id                String       @id @default(cuid())\n  gameName          String       @unique\n  onGoingTournament Tournament[]\n  users             UserGame[]\n}\n\nmodel Org {\n  id       String       @id @default(cuid())\n  name     String       @unique @db.VarChar(255)\n  admin    User         @relation(fields: [adminId], references: [id])\n  adminId  String       @unique\n  managers OrgManager[]\n}\n\nmodel OrgManager {\n  id     String @id @default(cuid())\n  orgId  String\n  org    Org    @relation(fields: [orgId], references: [id])\n  user   User   @relation(fields: [userId], references: [id])\n  userId String\n\n  @@unique([userId, orgId])\n}\n\nmodel Profile {\n  id       String     @id @default(cuid())\n  user     User       @relation(fields: [userId], references: [id])\n  userId   String     @unique\n  gamePlay UserGame[]\n  teams    Team       @relation(fields: [userTeam], references: [id])\n  userTeam String\n}\n\n// Tournament that the user join & the Org Create\nmodel Tournament {\n  id               String @id @default(cuid())\n  noOfTeam         Int\n  game             Game   @relation(fields: [gameName], references: [gameName])\n  gameName         String\n  noOfPlayerInTeam Int\n  teams            Team[]\n}\n\n//Team for the User Join\nmodel Team {\n  id          String       @id @default(cuid())\n  noOfPlayer  Int\n  users       Profile[]\n  tournaments Tournament[]\n}\n\nmodel User {\n  id        String       @id @default(cuid())\n  username  String       @unique @db.VarChar(255)\n  password  String\n  email     String       @unique @db.VarChar(255)\n  managerIn OrgManager[]\n  orgJoin   Org[]\n  profile   Profile?\n  role      UserRole     @default(USER)\n}\n\nmodel UserGame {\n  name       Game    @relation(fields: [gameName], references: [gameName])\n  gameName   String  @unique\n  userGameId String  @unique\n  ign        Profile @relation(fields: [userIgn], references: [userId])\n  userIgn    String  @unique\n}\n",
  "inlineSchemaHash": "80d38021b5fe8e6ba0a0cbed6d40685d6bd4040d5bef7f3f3022ffcebfbf2118",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"Game\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"gameName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"onGoingTournament\",\"kind\":\"object\",\"type\":\"Tournament\",\"relationName\":\"GameToTournament\"},{\"name\":\"users\",\"kind\":\"object\",\"type\":\"UserGame\",\"relationName\":\"GameToUserGame\"}],\"dbName\":null},\"Org\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"admin\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"OrgToUser\"},{\"name\":\"adminId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"managers\",\"kind\":\"object\",\"type\":\"OrgManager\",\"relationName\":\"OrgToOrgManager\"}],\"dbName\":null},\"OrgManager\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"orgId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"org\",\"kind\":\"object\",\"type\":\"Org\",\"relationName\":\"OrgToOrgManager\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"OrgManagerToUser\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":null},\"Profile\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ProfileToUser\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"gamePlay\",\"kind\":\"object\",\"type\":\"UserGame\",\"relationName\":\"ProfileToUserGame\"},{\"name\":\"teams\",\"kind\":\"object\",\"type\":\"Team\",\"relationName\":\"ProfileToTeam\"},{\"name\":\"userTeam\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":null},\"Tournament\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"noOfTeam\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"game\",\"kind\":\"object\",\"type\":\"Game\",\"relationName\":\"GameToTournament\"},{\"name\":\"gameName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"noOfPlayerInTeam\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"teams\",\"kind\":\"object\",\"type\":\"Team\",\"relationName\":\"TeamToTournament\"}],\"dbName\":null},\"Team\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"noOfPlayer\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"users\",\"kind\":\"object\",\"type\":\"Profile\",\"relationName\":\"ProfileToTeam\"},{\"name\":\"tournaments\",\"kind\":\"object\",\"type\":\"Tournament\",\"relationName\":\"TeamToTournament\"}],\"dbName\":null},\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"username\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"managerIn\",\"kind\":\"object\",\"type\":\"OrgManager\",\"relationName\":\"OrgManagerToUser\"},{\"name\":\"orgJoin\",\"kind\":\"object\",\"type\":\"Org\",\"relationName\":\"OrgToUser\"},{\"name\":\"profile\",\"kind\":\"object\",\"type\":\"Profile\",\"relationName\":\"ProfileToUser\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"UserRole\"}],\"dbName\":null},\"UserGame\":{\"fields\":[{\"name\":\"name\",\"kind\":\"object\",\"type\":\"Game\",\"relationName\":\"GameToUserGame\"},{\"name\":\"gameName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userGameId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"ign\",\"kind\":\"object\",\"type\":\"Profile\",\"relationName\":\"ProfileToUserGame\"},{\"name\":\"userIgn\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

